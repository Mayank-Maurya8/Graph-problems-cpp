class solution{
public:

	bool cycle(int node, int n, vector<int> adj[], vector<int>& vis){
		queue<pair<int,int>> q;
		//we will create a pair of node and prev
		vis[node] = 1;
		q.push({node,-1});
		//add the starting node and then mark it visited
		while(!q.empty()){
			// take the first value in the queue
			int s = q.front.first();
			int prev = q.front.second();
			q.pop();

			for(auto it : adj[s]){
				//iterate throught the adj of that node 
				//mark it visited if it is still not visited and then push it into the queue
				if(!vis[it]){
					vis[it] = true
					q.push({it,s});
				}
				//we get the cycle when the adj node which is visited and not the prev of that node
				else(prev != it){
					return true
				}
			}
		}
		return false;
	}


	bool bfscycle(int n, vetor<int> adj[]){
		vector<int> vis(n+1,0);
		for(int i=1;i<=n;i++){
			if(!vis[i]){
				if(cycle(i, n, adj[], vis)) return true;
			}
		}
		return false
	}
};
