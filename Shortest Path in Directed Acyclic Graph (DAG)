#include<bits/stdc++.h>
using namespace std;

void findtopo(int node, int n, vector<int> vis, stack<int> &st, vector<pair<int,int>> adj[]){
	vis[node]= 1;
	for(auto it: adj[node]){
		if(!vis[it.first]){
			findtopo(it.first, n, vis, st, adj);
		}
	}
	st.push(node);
}

void shortestpath(int src,int n, vector<pair<int,int>> adj[]){
	vector<int> vis(n,0);
	stack<int> st;
	for(int i=0;i<n;i++){
		if(!vis[i]){
			findtopo(i,n,vis,st,adj);
		}
	}
	vector<int> dist(n,INT_MAX);
	dist[src] = 0;
	
	// we will traverse throught the stack 
	while(!st.empty()){
		int node = st.top();
		st.pop();
		// if the distance of the node is != max val this means that the node has been reached 
		if(dist[node] != INT_MAX){
			for(auto it: adj[node]){
				// we check if the node distance + adj nodes weight is less than the weight of the adj node
				if(dist[node]+it.second < dist[it.first]){
					dist[it.first] = dist[node]+it.second ;
				}
			}
		}
	}
	for(int i=0;i<n;i++){
		dist[i] == INT_MAX ? cout << "INF" : cout << dist[i] << " ";
	}
	
}

int  main(){
	int n,m;
	cin >> n >> m;
	vector<pair<int,int>> adj[n];
	for(int i=0;i<n;i++){
		int u,v,wt;
		cin >> u >> v>> wt;
		adj[u].push_back({v,wt});
	}
	shortestpath(0, n, adj);
	return 0;
}
