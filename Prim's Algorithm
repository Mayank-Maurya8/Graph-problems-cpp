// TC = O(N LOGN)

#include<bits/stdc++.h>
using namespace std;

int main(){
	int n,m;
	cin >> n >>m;
	vector<pair<int,int>> adj[n];
	for(int i=0;i<m;i++){
		int u,v,wt;
		cin >> u >> v >> wt;
		adj[u].push_back({v,wt});
		adj[v].push_back({u,wt});
	}
	// we will create three vectors 
	// store the parent of each and every node
	vector<int> parent(n,-1);
	// bool type to check if the node is present in the mst set or not
	vector<int> mstset(n,false);
	// store the key of each nodes
	vector<int> key(n,INT_MAX);
	// make src node key 0
	key[0] =0;

	priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
	// min heap : pair (weight,node);
	pq.push({0,0});

	for(int c =0;c<n-1;c++){
		// take the node of the top value of the pq and mark the mstset for that as true 
		int u = pq.top().second;
		mstset[u] = true;
		// in this way we will always get the min span when ever we choose the top element of the pq

		for(auto it: adj[u]){
			int v = it.first;
			int w = it.second;
			// we will check if the mstset for that node is false on top of its weight being < key[v] 
			if(mstset[v] == false && key[v] > w){
				parent[v] = u;
				pq.push({key[v],v});
				key[v] =w ;
			}
		}
	}


	for(int i=0;i<n;i++){
		cout << parent[i] << "-" << i<<"\n";
	}

	return 0;
}
