#include<bits/stdc++.h>
using namespace std;

int main(){
	//adjacency matrix
	// int n,m;
	// cin >> n >> m;
	// int adj[n+1][n+1];

	// for(int i=0;i<n+1;i++){
	// 	for(int j=0;j<n+1;j++){
	// 		adj[i][j] = 0;
	// 	}
	// }


	// for(int i=0;i<m;i++){
	// 	int u,v;
	// 	cin >> u>>v;
	// 	adj[u][v] = 1;
	// 	adj[v][u] =1;
	// }
	// for(int i=0;i<n+1;i++){
	// 	for(int j=0;j<n+1;j++){
	// 		cout << adj[i][j] << " ";
	// 	}
	// 	cout << endl;
	// }

	//////////////////////////////////////////

	//adjacency list (unweighted)
	int n,m;
	cin >> n >> m;
	vector<int> adj[n+1];

	for(int i=0;i<m;i++){
		int u,v;
		cin >> u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);//remove this for the directed graph
	}
	for(int i=0;i<n+1;i++){
		for(int j=0;j<adj[i].size();j++){
			cout << adj[i][j] << " ";
		}
		cout << endl;
	}

	//adjacency list (weighted)
	int n,m;
	cin >> n >> m;
	vector<pai<int,int>> adj[n+1];

	for(int i=0;i<m;i++){
		int u,v,wt;
		cin >> u>>v >> wt;
		adj[u].push_back({v,wt});
		adj[v].push_back({u,wt});//remove this for the directed graph
	}
	for(int i=0;i<n+1;i++){
		for(int j=0;j<adj[i].size();j++){
			cout << adj[i][j] << " ";
		}
		cout << endl;
	}

	return 0;
}
