#include<bits/stdc++.h>
using namespace std;

int main(){
	int n,m,src;
	cin >> n >> m;
	cin >> src;
	vector<pair<int,int>> g[n+1];

	for(int i=0;i<m;i++){
		int u,v,wt;
		cin >> u >> v >> wt;
		g[u].push_back({v,wt});
		g[v].push_back({u,wt});
	}

	//dijikstra algo starts from here
	priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
	// min heap makes the pair in the form of (dist,from)
	vector<int> dist(n+1,INT_MAX);
	// create a disttance vector with max val
	dist[src]=0;
	pq.push(make_pair(0,src));

	while(!pq.empty()){
		int distance = pq.top().first;
		// get the node of the top most element of the priority_queue
		int prev = pq.top().second;
		pq.pop();

		for(auto it: g[prev]){
			// find its adj nodes and then compare the distance of that node with the prev 
			int next = it.first;
			int nextdist = it.second;
			if( dist[next] > dist[prev] + nextdist){
				dist[next] = dist[prev] + nextdist;
				pq.push(make_pair(dist[next], next));
			}
		}
	}

	for(int i=0;i<n;i++){
		cout << dist[i] << " ";
	}

	return 0;
}
